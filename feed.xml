<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>밍피디</title>
    <link>https://mingpd.github.io/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 15 Apr 2019 02:20:49 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 배포 및 기타 설정</title>
      <link>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-3/</link>
      <guid>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-3/</guid>
      <pubDate>Sun, 14 Apr 2019 11:41:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;public 권한의 &lt;code&gt;&amp;lt;자기계정명&amp;gt;.github.io&lt;/code&gt; 을 이름으로 갖는 Repository를 생성합니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="Github-Repository-설정"><a href="#Github-Repository-설정" class="headerlink" title="Github Repository 설정"></a>Github Repository 설정</h2><p>Github 계정 생성에 대한 얘기는 생략합니다.<br>중요한 것은 <code>mingpd.github.io</code> 도메인을 사용하고 싶다면 가입 시 반드시 유저명을 <code>mingpd</code>로 해야합니다.</p><p>두 개의 Repository를 준비하면 되겠습니다.</p><ol><li>public 권한의 <code>&lt;자기계정명&gt;.github.io</code> 을 이름으로 갖는 Repository</li><li>블로그 프로젝트를 관리할 Repository</li></ol><p>1번의 경우 Github Page 기능을 사용하기 위해 반드시 저 형식을 갖춰야합니다. 그렇지 않으면 Page 기능이 활성화가 안됩니다.</p><p>왜 두개의 저장소가 필요한지 간략히 설명을 드리겠습니다.<br>포토샵의경우 작업시 사용하는 psd 파일이 있고, 결과물인 png 파일이 있습니다.<br>쉽게말해 1번에는 png 파일을 내보내는것이고, 2번에는 psd 작업 파일을 관리한다고 생각하면 됩니다.</p><h2 id="Github-Page-배포-설정"><a href="#Github-Page-배포-설정" class="headerlink" title="Github Page 배포 설정"></a>Github Page 배포 설정</h2><p><a href="https://hexo.io/ko/docs/deployment" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a> 이 문서에 설명이 매우 잘 되어있으니 참고해주세요.<br>Repository는 위에서 말한것과 같이 준비되었다고 가정합니다.<br>우선 Github Page 배포를 설정하겠습니다.<br>앞서 라이브러리를 설치해야 합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>_config.yml의 git 부분을 아래와 같이 설정합니다.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/mingpd/mingpd.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span>   <span class="comment"># 혹시 다른 브랜치로 쓰실거면 바꿔주세요</span></span><br></pre></td></tr></table></figure></p><p>이제 아래를 실행해 주면 배포됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><h2 id="작업파일-Git-설정"><a href="#작업파일-Git-설정" class="headerlink" title="작업파일 Git 설정"></a>작업파일 Git 설정</h2><p>지금 이것과 별개로 작업 디렉토리에서 작업용 Git 설정을 해주시면 되는데요.<br>아래처럼 하면 되겠습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://github.com/작업용/깃주소.git</span><br><span class="line">...</span><br><span class="line"><span class="comment"># add, push 알아서 해주세요.</span></span><br></pre></td></tr></table></figure></p><p>(git의 pull, add, commit, push 관련 설명은 생략하겠습니다.)<br>참고로 제가 만든 <code>.gitignore</code> 는 아래와 같으니 참고해주세요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.sass-cache</span><br><span class="line">assets</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">.idea</span><br><span class="line">.deploy_git</span><br><span class="line">themes/landscape  # 기본테마인데 삭제 안해서 푸시만 안하게 하려고</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure></p><h2 id="DISQUS"><a href="#DISQUS" class="headerlink" title="DISQUS"></a>DISQUS</h2><p><a href="https://disqus.com" rel="external nofollow noopener noreferrer" target="_blank">DISQUS</a>에 가입합니다.<br>가입 후 <code>I want to isntall Disqus on my site</code>를 선택하여 세팅하면 됩니다.<br><code>https://계정명.disqus.com/admin/settings/general/</code>에 있는 shortname을<br><code>themes/tranquilpeak/_config.yml</code>에 세팅해주면 되겠습니다.</p><p>만약에 로딩이 잘 되지 않는다면 아래 사이트를 참고하여 url 설정을 다시 해 봅시다.<br><a href="https://www.thewordcracker.com/miscellaneous/disqus에서-we-were-unable-to-load-disqus-오류가-발생하는-경우/" rel="external nofollow noopener noreferrer" target="_blank">disqus에서-we-were-unable-to-load-disqus-오류가-발생하는-경우/</a></p><h2 id="검색엔진-노출-준비"><a href="#검색엔진-노출-준비" class="headerlink" title="검색엔진 노출 준비"></a>검색엔진 노출 준비</h2><p>이것은 정리가 잘 된 글의 링크를 첨부합니다.<br><a href="https://futurecreator.github.io/2016/06/23/search-engine-optimization-hexo-plugins/" rel="external nofollow noopener noreferrer" target="_blank">검색 엔진 최적화(SEO)에 유용한 Hexo 플러그인</a><br><a href="https://iseongho.github.io/posts/hexo-seo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo SEO - 하루 만에 검색 엔진 최적화 시키기</a></p><h3 id="애드센스-설정"><a href="#애드센스-설정" class="headerlink" title="애드센스 설정"></a>애드센스 설정</h3><p><a href="https://futurecreator.github.io/2016/06/16/add-google-adsense-to-hexo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 블로그에 구글 애드센스(Adsense) 추가하기</a></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사실 저도 만들어가면서 이 글을 쓰고있습니다.<br>많이 번거로울 줄 알았는데 생각보단 할만한것 같습니다. 그리고 매우 깔끔하고요.<br>조금 더 운영해보고 티스토리에 있는 데이터를 이전해올지 고민을 해봐야겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 글쓰기</title>
      <link>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/</link>
      <guid>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/</guid>
      <pubDate>Sun, 14 Apr 2019 11:23:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;hexo-cli&lt;/code&gt;가 워낙 잘 되어있기 때문에 간단한 명령어를 통해 글을 만들 수 있습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="Hexo-글쓰기"><a href="#Hexo-글쓰기" class="headerlink" title="Hexo 글쓰기"></a>Hexo 글쓰기</h2><p><code>hexo-cli</code>가 워낙 잘 되어있기 때문에 간단한 명령어를 통해 글을 만들 수 있습니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 일반 post는 아래와 같이 만듭니다.</span></span><br><span class="line">$ hexo new post <span class="string">"Github 블로그 만들기 with Hexo - 1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># draft 아래와 같이 만듭니다.</span></span><br><span class="line">$ hexo new draft <span class="string">"Github 블로그 만들기 with Hexo - 2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># draft를 post로 만들때</span></span><br><span class="line">$ hexo publish <span class="string">"Github 블로그 만들기 with Hexo - 2"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>draft란 초안이라는 의미입니다.</p></blockquote><p>참고로 draft를 post로 만들면 상단 front-matter가 초기화되니 꼭 확인을 해야겠습니다.<br>꼭 draft를 사용하지 않아도 브랜치 관리를 잘 해주면 해결될것 같기도 합니다.</p><p>위 둘의 경우는 각각 <code>scaffolds/post.md</code>, <code>scaffolds/draft.md</code>를 템플릿으로 사용합니다.<br>템플릿을 수정하고 싶은경우는 이 두 파일을 수정해두면 되겠습니다.<br>아래는 제가 사용하는 <code>post.md</code> 입니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Github</span> <span class="string">블로그</span> <span class="string">만들기</span> <span class="string">with</span> <span class="string">Hexo</span> <span class="bullet">-</span> <span class="string">글쓰기</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">1555241000000</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">[]</span></span><br><span class="line"><span class="attr">thumbnail:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">""</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">excerpt</span> <span class="bullet">--&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">toc</span> <span class="bullet">--&gt;</span></span><br></pre></td></tr></table></figure><p>다른 항목들은 보시면 바로 이해가 가실테니 <code>permalink</code>만 간단히 설명하겠습니다.<br>각 글의 주소는 <code>http://호스트명/2019/04/14/Github-블로그-만들기-with-Hexo---1/</code> 과 같이 title이 패스로 들어가게 됩니다.<br>만약 이 부분을 변경하고 싶을 때 <code>permalink</code>를 지정해주면 그 글의 주소는 설정한대로 적용됩니다.<br>자세한 내용은 <a href="https://hexo.io/ko/docs/front-matter" rel="external nofollow noopener noreferrer" target="_blank">Front-matter</a>를 참고해주세요.</p><h2 id="more-excerpt"><a href="#more-excerpt" class="headerlink" title="more, excerpt"></a>more, excerpt</h2><p>인덱스 페이지에 어느부분까지 표시할 건지에 대한 세팅을 할 수 있습니다.<br>본문에 아래 주석을 이용하면 되는데요.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">본문이 이렇게 있을 때 여기까지만 인덱스 페이지에 나타납니다.</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">여기서부턴 인덱스에 안나옵니다.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">여기까지의 내용은 인덱스 페이지에만 나타납니다.</span><br><span class="line">&lt;!-- excerpt --&gt;</span><br><span class="line">여기서부턴 본문 시작입니다.</span><br></pre></td></tr></table></figure><h2 id="Escape"><a href="#Escape" class="headerlink" title="Escape"></a>Escape</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>이렇게 템플릿 문법을 이스케이핑 하기 위해서는 raw 구문을 이용합니다.</p><h2 id="이미지-삽입"><a href="#이미지-삽입" class="headerlink" title="이미지 삽입"></a>이미지 삽입</h2><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span> <span class="comment"># or false</span></span><br></pre></td></tr></table></figure><p>만약 <code>_config.yml</code> 파일의 저 항목이 true로 되어있다면 글 마다 글 제목과 같은 asset용 디렉토리가 생깁니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img demo.png %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>그 디렉토리의 <code>demo.png</code>를 첨부하려면 위와같이 하면 됩니다.<br><a href="https://hexo.io/ko/docs/asset-folders" rel="external nofollow noopener noreferrer" target="_blank">Asset-Folders</a>를 참고해주세요. </p><h2 id="로컬에서-확인하기"><a href="#로컬에서-확인하기" class="headerlink" title="로컬에서 확인하기"></a>로컬에서 확인하기</h2><p>퍼블리싱 전에 로컬에서 확인을 하기 위해서는 아래 명령을 이용합니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo server --draft <span class="comment"># draft도 확인하고 싶을 때</span></span><br></pre></td></tr></table></figure></p><p>자세한 내용은 <a href="https://hexo.io/ko/docs/commands" rel="external nofollow noopener noreferrer" target="_blank">Commands</a>를 참고해주세요.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>사실 공식 문서에 다 있는 내용이고 문서가 번역도 다 되어있어서 거기를 한번 쓱 보시는게 좋을듯 합니다.<br>이제 대충 글 쓰는 방법은 알았으니 다음엔 배포를 어떻게 할지 알아보겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Github 블로그 만들기 with Hexo - 초기설정</title>
      <link>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/</link>
      <guid>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/</guid>
      <pubDate>Sun, 14 Apr 2019 08:10:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;장점을 다 포기하더라도 Geek 함을 좇고 싶은자에게 추천합니다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><!-- toc --><h2 id="Github-블로그-만들기"><a href="#Github-블로그-만들기" class="headerlink" title="Github 블로그 만들기"></a>Github 블로그 만들기</h2><p>최근에 제가 무슨 바람이 들었는진 모르겠지만 왠지 나만의 글쓰기 공간이 필요할것 같다는 생각이 들었습니다.<br>그래서 여러 글쓰기 플랫폼을 고려해보았는데요. 최종 후보는 아래처럼 두가지로 추려졌습니다.</p><ul><li>티스토리</li><li>Github Page</li></ul><p>실제 얼마전부터 티스토리에 글을 쓰고 있습니다.<br>하지만 <code>*.github.io</code> 라는 도메인이 자꾸 눈앞에 아른거리더군요.<br>제가 개발자여서 그런지 Github 블로그만의 geek함을 도저히 떨쳐버릴수가 없었습니다.<br>게다가 한 1~2년전부터 정적 웹사이트 생성기로 블로그를 만드는게 유행이라고 하더군요.<br>그래서 생각했습니다.</p><blockquote><p>둘 다 해보자</p></blockquote><h2 id="Github-블로그를-고민하는-분들께"><a href="#Github-블로그를-고민하는-분들께" class="headerlink" title="Github 블로그를 고민하는 분들께"></a>Github 블로그를 고민하는 분들께</h2><p>사실 잘 만들어져있는 플랫폼을 사용하는게 가장 좋습니다. 저도 이것을 만들기까지 굉장한 고민을 했습니다.<br>일단 Github 블로그가 아닌 잘 만들어진 플랫폼을 사용했을때의 이점을 생각해봅시다. </p><ul><li>글쓰기외엔 아무 생각 안해도 된다.</li><li>글을 쓸 때 고퀄의 웹에디터를 사용할 수 있다.</li><li>통계기능을 지원한다.</li><li>네이버 블로그나 티스토리는 자사 검색엔진 노출을 보장한다.</li><li>카테고리, 태그, 방명록, 구독, 이웃 등의 요소들이 제공된다.</li></ul><p>위의 장점에 비춰볼때 Github 블로그는 아래에 해당하는 분들께 추천합니다.</p><ul><li>위의 모든 장점을 다 포기하더라도 Geek 함을 좇고 싶은 자</li><li>필요한 것들에 대해 스스로 답을 찾을 각오가 되어있는 자 </li></ul><p>바꿔말하면 <code>geek 함 말고 장점이 없다</code> 입니다.<br>네. 맞습니다. 그거 하나때문에 시작하려고 합니다.</p><p>그래도 아쉬우니 장점을 꼽자면..</p><ul><li>커스터마이징이 무궁무진하다.</li><li>IDE로 작업하기 때문에 일하는 줄 안다.</li></ul><p>등이 있겠군요.</p><h2 id="Hexo를-선택한-이유"><a href="#Hexo를-선택한-이유" class="headerlink" title="Hexo를 선택한 이유"></a>Hexo를 선택한 이유</h2><p>정적 웹사이트 생성기에 대해 많이 알아보았습니다. <code>Jeykill</code>이 가장 많이 사용되었고, 그 뒤를 <code>Hexo</code>가 따르고 있더군요. 물론 다른 선택지도 많이 있었습니다만 Hexo를 선택한 이유는 다음과 같습니다.</p><ul><li><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak</a> 테마가 아주 맘에 들었다.</li><li>한글 문서가 있다.</li><li>검색하면 참고할게 많이 나온다.</li><li><code>Jekyll</code>도 참고할게 많지만 맘에드는테마가 없다.</li><li>개인적으로 <code>Ruby</code> 보다는 <code>Nodejs</code> 가 낫다.</li></ul><p>사실 어떤 언어 기반으로 만들어졌냐는 초기 세팅할 때 말곤 크게 의미가 없습니다.<br><code>Jekyll</code>과 <code>Hexo</code>는 처음에 <code>gem</code> 으로 설치하느냐 <code>npm</code> 으로 설치하느냐 차이입니다.<br>게다가 어차피 글은 마크다운으로 쓸 것이기 때문에 기반 언어와 크게 상관이 없습니다.</p><h2 id="Hexo-프로젝트-생성-Tranquilpeak-적용"><a href="#Hexo-프로젝트-생성-Tranquilpeak-적용" class="headerlink" title="Hexo 프로젝트 생성 + Tranquilpeak 적용"></a>Hexo 프로젝트 생성 + Tranquilpeak 적용</h2><p>모든 내용은 <a href="https://hexo.io/ko/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>에 친절히 설치되어있습니다만 중요한것들은 직접 나열해보도록 하겠습니다.<br>저는 mac의 환경인데요. 혹시 windows를 사용하신다면 bash shell을 사용할 수 있는 도구를 준비해주세요.<br>참고로 <em>git, nodejs는 설치됐다고 가정합니다.</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 아래의 명령으로 hexo-cli를 설치해줍시다.</span></span><br><span class="line">$ npm install hexo-cli -g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 권한에 걸린다면 sudo를 이용합시다.</span></span><br><span class="line">$ sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령으로 hexo 기본 프로젝트를 생성합니다.</span></span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><br>만약 설치가 잘 안된다 싶으면 npm에 대한 문제 해결 방법을 찾아봐야하는데요.<br>구글링을 잘 해보시면 되겠습니다.</p><p>저는 성질이 급하므로 바로 <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak</a> 테마를 적용해보았습니다.<br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/releases" rel="external nofollow noopener noreferrer" target="_blank">releases</a>에서 최신 버전을 받도록 합시다.<br>현재 기준 3.0.2가 최신이네요.</p><ol><li>다운로드 받은 후 압축을 푼다.</li><li>풀린 디렉토리 이름을 <code>tranquilpeak</code>로 변경한다.</li><li>이 디렉토리를 위에서 생성한 hexo 기본 프로젝트 내의 <code>themes</code> 디렉토리에 넣는다.</li><li>위에서 생성한 프로젝트의 _config.yml을 연다. (themes/tranquilpeak/_config.yml이 아닙니다!)</li><li>맨아래로 주르륵 내려가서 테마를 <code>theme: tranquilpeak</code>로 변경한다.</li></ol><p>대충 설정은 다 된것 같으니 띄워봅시다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위에서 생성한 프로젝트 디렉토리인 &lt;folder&gt;에서 진행합니다.</span></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><br>로컬에서는 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a>에서 테스트가 가능합니다.<br><code>Hello World</code>라는 예제가 잘 나타나면 성공입니다.</p><h2 id="category-tags-활성화-하기"><a href="#category-tags-활성화-하기" class="headerlink" title="category, tags 활성화 하기"></a>category, tags 활성화 하기</h2><p>자세한건 <a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak 문서</a>를 참고하시면 됩니다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위에서 생성한 프로젝트 디렉토리인 &lt;folder&gt;에서 진행합니다.</span></span><br><span class="line">$ hexo new page <span class="string">"all-categories"</span></span><br><span class="line">$ hexo new page <span class="string">"all-tags"</span></span><br></pre></td></tr></table></figure></p><p>위 두 명령을 실행했다면 아래의 파일들이 생겼을겁니다.</p><ul><li>source/all-categories/index.md</li><li>source/all-tags/index.md</li></ul><p>위 두 파일을 각각 아래처럼 수정해줍시다.</p><figure class="highlight yaml"><figcaption><span>source/all-categories/index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"all-categories"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"all-categories"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>source/all-tags/index.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"all-tags"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"all-tags"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="사이드바-바꾸기"><a href="#사이드바-바꾸기" class="headerlink" title="사이드바 바꾸기"></a>사이드바 바꾸기</h2><img src="/2019/04/14/github-blog-with-hexo-1/demo.png"><p><a href="https://louisbarranqueiro.github.io/hexo-theme-tranquilpeak/" rel="external nofollow noopener noreferrer" target="_blank">데모 페이지</a>에서 보다시피 가로 1280px 이상이면 사이드바가 매우 넓은데요.<br>저는 컨텐츠 영역을 더 크게 보고 싶기때문에 이 옵션을 약간 변경했습니다.</p><ol><li><code>themes/tranquilpeak/_config.yml</code>를 연다.</li><li><code>sidebar_behavior</code>를 찾는다.</li><li><code>sidebar_behavior: 2</code>로 변경한다.</li></ol><p>참고로 주석에 많은 설명들이 있으니 본인이 원하는 것으로 지정하면 되겠습니다.</p><h2 id="cover-바꾸기"><a href="#cover-바꾸기" class="headerlink" title="cover 바꾸기"></a>cover 바꾸기</h2><p>사이드바 영역의 이미지를 바꾸고 싶다면 아래와 같이 합니다.</p><ol><li><code>themes/tranquilpeak/source/_images</code> 에 원하는 이미지를 넣는다.</li><li><code>themes/tranquilpeak/_config.yml</code>를 연다.</li><li><code>cover_image</code>라고 쓰여진 부분을 찾는다.</li><li><code>cover_image: &lt;파일명&gt;</code>으로 변경한다.</li></ol><p>참고로 기본 커버이미지들은 <code>1920x1080</code> 입니다. 저는 일단 같은 사이즈의 이미지로 교체하였습니다.</p><h2 id="font-바꾸기"><a href="#font-바꾸기" class="headerlink" title="font 바꾸기"></a>font 바꾸기</h2><p>이 프로젝트가 영문, 중문 등만 지원하다보니 한글 폰트가 매우 안타깝게 나타나는데요.<br>맘에 안드니 폰트를 교체해보도록 하겠습니다. 참고로 저의 경우 <a href="https://hangeul.naver.com/2017/nanum" rel="external nofollow noopener noreferrer" target="_blank">나눔스퀘어라운드</a>를 사용하였습니다.<br>소스코드 폰트는 <code>Source Code Pro</code>입니다.</p><ol><li><code>themes/tranquilpeak/source/_css/tranquilpeak.scss</code>를 엽니다.</li><li>파일 하단에 이것을 추가합시다. <br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span></span><br><span class="line">url(https://cdn.rawgit.com/innks/NanumSquareRound/master/nanumsquareround.css);</span><br></pre></td></tr></table></figure></li></ol><p>cdn에 올라가있는 나눔폰트 관련 css를 import 해주었습니다.</p><p>다음은 기본 폰트 설정을 바꿔줘야합니다.</p><ol><li><code>themes/tranquilpeak/source/_css/utils/_variables.scss</code>를 열어봅시다.</li><li>Font families 부분을 아래와 같이 수정합시다. (불안하면 한 벌 복사해서 주석처리해둡시다.) <br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font families</span></span><br><span class="line"><span class="variable">$merriweather-serif</span>:   <span class="string">'Merriweather'</span>, serif; <span class="comment">// 이건 지우면 에러나더라고요</span></span><br><span class="line"><span class="variable">$nanum-sans-kr</span>:          <span class="string">'NanumSquareRound'</span>, <span class="string">"Helvetica Neue"</span>, sans-serif; <span class="comment">// 기본 폰트 </span></span><br><span class="line"><span class="variable">$nanum-coding</span>:   <span class="string">'Source Code Pro'</span>, <span class="string">"NanumSquareRound"</span>, Consolas; <span class="comment">// 코드 폰트</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$font-family-base</span>: <span class="variable">$nanum-sans-kr</span>; <span class="comment">// 기본폰트 바꾸기</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래처럼 'code'와 'highlight'만 코드 폰트로 변경하고</span></span><br><span class="line"><span class="comment">// 나머지는 전부 나눔스퀘어라운드로 변경합시다.</span></span><br><span class="line"><span class="variable">$font-families</span>: (</span><br><span class="line">  // base</span><br><span class="line">    <span class="string">'headings'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">  // components</span><br><span class="line">    <span class="string">'code'</span>: <span class="variable">$nanum-coding</span>,</span><br><span class="line">    <span class="string">'caption'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'image-gallery'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-header-cover'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-meta'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-content'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'post-excerpt-link'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">    <span class="string">'highlight'</span>: <span class="variable">$nanum-coding</span>,</span><br><span class="line">  // layout</span><br><span class="line">    <span class="string">'sidebar'</span>: <span class="variable">$nanum-sans-kr</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><p>사실 이렇게 변경해도 적용이 안됩니다. 빌드 과정을 거쳐줘야 적용이 되는데요.<br>아래에서 알아봅시다.</p><h2 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h2><p>grunt란 아주 단순히 말해서 javascript 빌드 툴이라고 생각하시면 되는데요. 궁금하면 직접 검색해보시길 권장합니다.<br>여기서는 그냥 <code>테마 안의 css, js 등을 변경한 후에 해야할 일</code>이라고 알아두시면 편할것 같습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 안되면 sudo 권한으로 진행해주세요.</span></span><br><span class="line">$ npm install -g grunt-cli</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> themes/tranquilpeak</span><br><span class="line">$ npm install grunt --save-dev</span><br></pre></td></tr></table></figure><p>초기 설정은 이렇게 하면 됩니다.<br>앞으로 테마 안의 css, js 등을 수정한 후엔 아래의 명령을 날립시다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># themes/tranquilpeak 디렉토리에서</span></span><br><span class="line">$ grunt build</span><br></pre></td></tr></table></figure></p><p>그 후 hexo server를 구동시키면 폰트가 바뀌어있을 것입니다.</p><h2 id="그-외-config"><a href="#그-외-config" class="headerlink" title="그 외 config"></a>그 외 config</h2><p>사실 여기서 모든 설정을 다 다룰 순 없습니다. 그냥 제가 건드린것들만 소개합니다.</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"밍피디"</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">"잔망스러운 개발자, 밍피디"</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">"밍피디"</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">"en"</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">"Asia/Seoul"</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/ko/docs/configuration" rel="external nofollow noopener noreferrer" target="_blank">Hexo 문서</a>를 참고하여 필요한 것들도 설정해줍시다. </p><p>아래는 테마의 설정 파일입니다.<br><figure class="highlight yaml"><figcaption><span>themes/tranquilpeak/_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="attr">    menu:</span></span><br><span class="line"><span class="attr">        home:</span></span><br><span class="line"><span class="attr">            title:</span> <span class="string">global.home</span></span><br><span class="line"><span class="attr">            url:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">            icon:</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">    <span class="comment"># ... 필요한 것들만 활성화 해주세요</span></span><br><span class="line">            </span><br></pre></td></tr></table></figure><br><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/DOCUMENTATION.md" rel="external nofollow noopener noreferrer" target="_blank">Tranquilpeak 문서</a>를 참고하여 마저 설정합시다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>초기 세팅에 대해서만 알아보았는데요. 다른 솔루션에 비해서는 생각보다 간단한것 같은 느낌이 듭니다.<br>세팅만 하고 글을 쓰는 방법을 소개하지 못했으니 다음 포스팅에서는 글을 쓰는 방법을 알아보겠습니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/04/14/github-blog-with-hexo-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java, optional의 orElse와 orElseGet의 차이</title>
      <link>https://mingpd.github.io/2019/03/31/java-orelse-orelseget/</link>
      <guid>https://mingpd.github.io/2019/03/31/java-orelse-orelseget/</guid>
      <pubDate>Sun, 31 Mar 2019 09:06:21 GMT</pubDate>
      <description>
      
        &lt;p&gt;orElse는 null이던말던 항상 불립니다.&lt;br&gt;orElseGet은 null일 때만 불립니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --><br>java8의 optional api 많이들 사용하실텐데요.<br>어찌보면 당연하지만 햇갈리는 내용에 대해 다뤄보겠습니다.<br>orElse와 orElseGet의 차이입니다.  </p><p>귀찮으신분들을 위해 요약을 먼저 하자면</p><blockquote><p>orElse는 null이던말던 항상 불립니다.<br>orElseGet은 null일 때만 불립니다.</p></blockquote><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String username = <span class="string">"이름"</span>;</span><br><span class="line">String result1 = Optional.ofNullable(username).orElse(<span class="string">"no name"</span>);</span><br><span class="line">System.out.println(result1);</span><br><span class="line"></span><br><span class="line">String result2 = Optional.ofNullable(username).orElseGet(() -&gt; <span class="string">"no name"</span>);</span><br><span class="line">System.out.println(result2);</span><br></pre></td></tr></table></figure><p>위 두 println의 결과는 무엇일까요?<br>네 당연하게도 “이름” 입니다.<br>왜냐면 username != null 이기 때문이죠.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String username = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//.. 이하 동일</span></span><br></pre></td></tr></table></figure><p>그럼 위처럼 username == null 이면?<br>네. 당연하게도 둘다 “no name” 입니다.  </p><p>그럼 같은거 아냐?<br>아닙니다. 아래의 경우를 생각해봅시다.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ohMyGod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String username = <span class="keyword">null</span>;</span><br><span class="line">String result1 = Optional.ofNullable(username).orElse(getDefaultName());</span><br><span class="line">System.out.println(result1);</span><br><span class="line"></span><br><span class="line">String result2 = Optional.ofNullable(username).orElseGet(() -&gt; getDefaultName());</span><br><span class="line">System.out.println(result2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getDefaultName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"no name"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우에 결과는 어떻게 될까요?<br>네. 둘다 “no name” 입니다. 결과는 같지만 여긴 굉장한 차이가 있습니다.<br>orElse의 경우는 “값”을 취합니다.<br>orElseGet은 “Supplier”를 취하죠.  </p><p>위의 예시는 아래 코드로 다시 쓰여질 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String username = <span class="keyword">null</span>;</span><br><span class="line">String defaultName = getDefaultName(); <span class="comment">// 여기가 다릅니다.</span></span><br><span class="line">String result1 = Optional.ofNullable(username).orElse(defaultName);</span><br><span class="line">System.out.println(result1);</span><br><span class="line"></span><br><span class="line">Supplier&lt;String&gt; supplier = () -&gt; getDefaultName(); <span class="comment">// 여기요.</span></span><br><span class="line">String result2 = Optional.ofNullable(username).orElseGet(supplier);</span><br><span class="line">System.out.println(result2);</span><br></pre></td></tr></table></figure><p>아시겠나요? </p><blockquote><p>orElse는 null이던말던 항상 불립니다.<br>orElseGet은 null일 때만 불립니다.</p></blockquote><p>위의 예시에서는 ‘그래서 뭐?’ 라고 생각하시겠지만 아래의 경우를 한 번 봅시다.<br>실제 이것 때문에 장애를 낼 뻔한 적이 있습니다.  </p><h2 id="큰-일-날-뻔한-사례"><a href="#큰-일-날-뻔한-사례" class="headerlink" title="큰 일 날 뻔한 사례"></a>큰 일 날 뻔한 사례</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userRepository.findByName(name).orElse(createUserWithName(name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">createUserWithName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">User newUser = <span class="keyword">new</span> User();</span><br><span class="line">newUser.setName(name)</span><br><span class="line"><span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(대충 이런 상황이었습니다.)<br>만약 user 테이블의 name이 unique였다면?  </p><p>네. 맞습니다. 장애입니다. 왜냐면 아래랑 같기 때문이죠.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">User newUser = createUserWithName(name); <span class="comment">// ㅠㅠ</span></span><br><span class="line"><span class="keyword">return</span> userRepository.findByName(name).orElse(newUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">createUserWithName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">User newUser = <span class="keyword">new</span> User();</span><br><span class="line">newUser.setName(name)</span><br><span class="line"><span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이해가 되시나요?</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>참 당연한건데 햇갈리는 경우가 있습니다.<br>버그는 정말 사소한것에서 부터 옵니다. 조심합시다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/03/31/java-orelse-orelseget/#disqus_thread</comments>
    </item>
    
    <item>
      <title>angular, 같은 패스로 또 route 할 때 강제 새로고침 시키기</title>
      <link>https://mingpd.github.io/2019/03/12/angular-force-refresh/</link>
      <guid>https://mingpd.github.io/2019/03/12/angular-force-refresh/</guid>
      <pubDate>Tue, 12 Mar 2019 06:26:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;현재 라우팅 된 메뉴를 한번 더 클릭하면 어떤일이 발생할까요?&lt;br&gt;…아무일도 일어나지 않습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="TMI-투척"><a href="#TMI-투척" class="headerlink" title="TMI 투척"></a>TMI 투척</h2><p>전 서버개발자 인데요. 주로 spring을 다룹니다. 그러나 서버개발자라도 프론트를 다룰일이 생깁니다.<br>바로 운영툴 때문이죠.<br>원래 운영툴은 대충대충 만듭니다. 그래서 spring에서 자주쓰는 템플릿 엔진을 주로 사용하곤 했습니다.<br>(freemarker, velocity 등등)</p><p>그러나 운영자의 요구사항이 많아지고, 기능이 점점 추가되다보면<br>서버 로직과 강하게 결합된 템플릿 엔진의 코드를 보면 한숨이 절로 나오게 됩니다.<br>그래서 프론트를 제대로 다루기 위한 솔루션 도입을 검토하는데요.<br>저흰 angular를 도입했습니다.</p><p>개인적으로 angular는 다른 js 솔루션들 보다<br>spring mvc에 익숙한 서버개발자들이 오히려 구조를 파악하기에 쉬운 것 같습니다.<br>(물론 풀스펙의 프레임워크다보니 진입 장벽은 있습니다.)</p><h2 id="routing-할-때-매번-새로고침-시키는-방법"><a href="#routing-할-때-매번-새로고침-시키는-방법" class="headerlink" title="routing 할 때 매번 새로고침 시키는 방법"></a>routing 할 때 매번 새로고침 시키는 방법</h2><p>angular에서 상단, 왼쪽 메뉴에 route 구성을 해줘야하는데요.<br>이때 현재 라우팅 된 메뉴를 한번 더 클릭하면 어떤일이 발생할까요?<br>정답은.. 아무일도 일어나지 않습니다.</p><p>그러려니 하는 찰나에 기획자분께서 요청을 주십니다.<br><blockquote><p>“현재 페이지를 여는 메뉴를 한번 더 눌렀을때 이 페이지를 다시 로드하게 해주세요.”</p></blockquote></p><p>당연히 angular route 옵션에 이런게 있을줄 알았는데 아무리 찾아도 없습니다.<br>그래서 front 개발자분께 자문을 구해봅니다.</p><blockquote><p>“이러이러한 angular 옵션이 있나요?”<br>.<br>.<br>.<br>“Nope”</p></blockquote><h2 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h2><p>다만 이분들도 같은 요구사항을 처리한 적이 있으셔서 자체적으로 방법을 찾으셨는데요.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">load(href: <span class="built_in">string</span>) &#123;</span><br><span class="line">   <span class="keyword">this</span>.router.navigateByUrl(<span class="string">'/blank-for-reload'</span>, &#123;</span><br><span class="line">     skipLocationChange: <span class="literal">true</span>,</span><br><span class="line">   &#125;).then(</span><br><span class="line">     () =&gt; &#123;</span><br><span class="line">       <span class="keyword">this</span>.router.navigateByUrl(href);</span><br><span class="line">     &#125;</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>그분들의 얘기를 듣고 구현한 결과입니다.<br>위는 Menu를 구성하는 component 안에 있는 한 메소드입니다.<br>메뉴를 클릭하면 직접 router의 navigateByUrl을 부르지 않고 위처럼 한번 감싼 load 메소드를 호출합니다.</p><p>감이 오시나요? <code>/blank-for-reload</code> 패스에 아무것도 없는 빈화면 컴포넌트 만들어둡니다.<br>그 후 메뉴에서 특정 버튼을 누르면 빈화면으로 한 번 갔다가 의도한 패스로 다시 보내버립니다.<br>참 쉽죠?<br>주의할 점은 반드시 <code>skipLocationChange: true</code> 로 지정해줘야 한다는 점입니다.</p><p><a href="https://angular.io/api/router/NavigationExtras#skipLocationChange" rel="external nofollow noopener noreferrer" target="_blank">https://angular.io/api/router/NavigationExtras#skipLocationChange</a> 여기를 보면 알수 있듯이<br>이것을 true 로 지정해야 뒤로가기 스택에 쌓이지 않습니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>정답이 있어야만 구현 할 수 있는게 아닙니다. 걍 돌아가면 그게 정답인것이죠.<br>(이 일을 몇년 해보면서 느낍니다.)</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/03/12/angular-force-refresh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java, checked excepton을 아름답게 unchecked exception으로 바꾸기</title>
      <link>https://mingpd.github.io/2019/03/12/java-checked-to-unchecked/</link>
      <guid>https://mingpd.github.io/2019/03/12/java-checked-to-unchecked/</guid>
      <pubDate>Tue, 12 Mar 2019 02:59:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;그냥 RuntimeException으로 감싸면 되는거 아냐?&lt;/code&gt;&lt;br&gt;맞습니다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><p>checked exception과 unchecked exception이 대체 뭐고, 무슨 차이가 있는지에 대한 내용은 과감히 생략합니다.</p><h2 id="그냥-RuntimeException으로-감싸면-되는거-아냐"><a href="#그냥-RuntimeException으로-감싸면-되는거-아냐" class="headerlink" title="그냥 RuntimeException으로 감싸면 되는거 아냐?"></a>그냥 RuntimeException으로 감싸면 되는거 아냐?</h2><p>맞습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Object&gt;&gt; getSheetValues(String spreadSheetId, String sheetName, String range) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sheets.spreadsheets().values().get(spreadSheetId, sheetName + <span class="string">"!"</span> + range).execute().getValues();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(앞서 포스팅했던 구글API 관련하여 구글시트API의 실 사용 예입니다.)<br>네 저러면 되죠. 하지만 한 클래스에 저런류의 메소드가 아주 많다면?<br>보기 싫어집니다. 저만 그런건진 모르겠습니다만 { } 이 많아지는게 참 거슬립니다.<br>또 중복되는 코드가 많아지는데 저것을 공통화 하기도 참 애매한 현실이 너무 싫습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data.stream().map(p -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        someCheckedExceptionThrow(p);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>아니면 이런상황을 생각해봅시다.<br>stream.map을 수행할때 checked exception을 발생시키는 메소드를 태워야할 때..<br>정말 보기만 해도 화가 솟구칩니다.<br>좋은 방법이 없을까 찾아보던 찰나…</p><h2 id="throwable-interfaces"><a href="#throwable-interfaces" class="headerlink" title="throwable-interfaces"></a>throwable-interfaces</h2><p><a href="https://github.com/StefanLiebenberg/throwable-interfaces" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/StefanLiebenberg/throwable-interfaces</a></p><p>이런 솔루션을 발견했습니다.<br>쉽게말해서 java8의 java.util.function 안에 있는 FunctionInterface들에 Throwable 처리를 해준 라이브러리입니다.<br>작동 방식이 궁금하시면 저 깃헙 코드를 참고해주시면 되고요.<br>제가 위에 든 예시에 이 라이브러리르 적용했을때 어떻게 되는지 보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Object&gt;&gt; getSheetValues(String spreadSheetId, String sheetName, String range) &#123;</span><br><span class="line">    <span class="keyword">return</span> SupplierWithThrowable.castSupplierWithThrowable(</span><br><span class="line">        () -&gt; sheets.spreadsheets().values().get(spreadSheetId, sheetName + <span class="string">"!"</span> + range).execute().getValues()</span><br><span class="line">    ).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 예시입니다. try - catch 블럭이 사라졌습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data.stream()</span><br><span class="line">    .map(FunctionWithThrowable.castFunctionWithThrowable(p -&gt; someCheckedExceptionThrow(p))</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>아래 예시입니다. 역시 사라졌습니다.<br>그런데 메소드가 더 길어져서 불편하다고요..?<br>static import를 사용해서 앞에 class 명은 떼버릴 수 있습니다.<br>그리고 한 클래스에 저런 try-catch 블록이 계속 중복되는 코드를 넣어야 할땐 훨씬 깔끔해 보일 수 있습니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>공식이 아닌 서드파티 개발자의 라이브러리 사용하기 vs 그냥 try - catch 사용하기<br>머릿속에서 이 두가치관이 싸우고 있지만 거기서 조금이나마 이기는쪽을 선택하시길 바랍니다.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/03/12/java-checked-to-unchecked/#disqus_thread</comments>
    </item>
    
    <item>
      <title>java, google api 이용하기</title>
      <link>https://mingpd.github.io/2019/03/12/java-google-api/</link>
      <guid>https://mingpd.github.io/2019/03/12/java-google-api/</guid>
      <pubDate>Tue, 12 Mar 2019 01:50:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Google API를 이용하기 위한 인증처리를 해봅시다.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<!-- excerpt --><br><!-- toc --></p><h2 id="준비물"><a href="#준비물" class="headerlink" title="준비물"></a>준비물</h2><p>첫번째 준비물, <a href="https://console.cloud.google.com/apis/dashboard" rel="external nofollow noopener noreferrer" target="_blank">https://console.cloud.google.com/apis/dashboard</a> 에서 어떤 API를 사용할지 세팅</p><ul><li>앱을 생성하지 않았다면 앱 이름부터 잘 지어서 생성하도록 합시다.</li><li>저의 경우 YouTube Data API v3, Google Sheets API, Google Drive API 이 3개를 지정했습니다.</li><li>참고로 구글스프레드시트를 사용할거면 Google Drive API도 꼭 사용 설정을 해야합니다.</li></ul><p>두번째 준비물, <a href="https://console.cloud.google.com/iam-admin/serviceaccounts" rel="external nofollow noopener noreferrer" target="_blank">https://console.cloud.google.com/iam-admin/serviceaccounts</a> 에서 서비스 계정 생성하기</p><ul><li>private 구글 시트의 경우는 서버 인증키 방식으로 데이터 엑세스를 못하므로 서비스 계정을 생성하여 접근해야 합니다.</li><li>여기서 중요한것은, 설정한 이메일 주소를 구글 시트 공유 기능을 이용하여 권한 초대를 해줘야 한다는 점입니다. (말그대로 계정이니까)</li><li>또 중요한 것은 인증 키 파일을 json으로 저장해둬야 합니다. (왜냐면 밑에서 개발을 그렇게 할거니까요..)</li></ul><h2 id="개발-착수"><a href="#개발-착수" class="headerlink" title="개발 착수"></a>개발 착수</h2><p>spring-boot 2 프로젝트(그냥 spring mvc도 가능)를 준비합시다.<br>우선 위에서 다운로드 받은 서비스 계정 관련 json 파일을 resources 디렉토리에 복사합니다.<br>그 다음, 아래처럼 pom.xml을 열고 필요한 api 라이브러리들의 의존성을 넣습니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.apis/google-api-services-sheets --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.apis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>google-api-services-sheets<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>v4-rev1-1.21.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.api-client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>google-api-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.apis/google-api-services-youtube --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.apis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>google-api-services-youtube<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>v3-rev206-1.25.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위에서 언급한것 처럼 구글시트와 youtube api를 사용할건데요. 그래서 그 두개를 추가했습니다.<br>여기서 중요한 것은 저 exclusions인데, 위 아래 두개의 라이브러리에서 버전이 다른 google-api-client를 참조해서그런지 충들이 발생하네요.<br>따라서 더 낮은 버전을 제외하기 위해 저런 구문을 추가하도록 합시다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ResourceUtils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.google.api.client.googleapis.auth.oauth2.GoogleCredential;</span><br><span class="line"><span class="keyword">import</span> com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;</span><br><span class="line"><span class="keyword">import</span> com.google.api.client.http.javanet.NetHttpTransport;</span><br><span class="line"><span class="keyword">import</span> com.google.api.client.json.jackson2.JacksonFactory;</span><br><span class="line"><span class="keyword">import</span> com.google.api.services.sheets.v4.Sheets;</span><br><span class="line"><span class="keyword">import</span> com.google.api.services.sheets.v4.SheetsScopes;</span><br><span class="line"><span class="keyword">import</span> com.google.api.services.youtube.YouTube;</span><br><span class="line"><span class="keyword">import</span> com.google.api.services.youtube.YouTubeScopes;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoogleAPIClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Sheets sheets;</span><br><span class="line">    <span class="keyword">private</span> YouTube youTube;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoogleAPIClient</span><span class="params">(@Value(<span class="string">"$&#123;api.google.appName"</span>)</span> String appName,</span></span><br><span class="line"><span class="function">                           @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;api.google.serviceAccountAuthFile&#125;"</span>)</span> String keyFileName) <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        InputStream keyFile = ResourceUtils.getURL(<span class="string">"classpath:"</span> + keyFileName).openStream();</span><br><span class="line">        GoogleCredential credential = GoogleCredential.fromStream(keyFile).createScoped(Arrays.asList(SheetsScopes.SPREADSHEETS, YouTubeScopes.YOUTUBE));</span><br><span class="line">        NetHttpTransport transport = GoogleNetHttpTransport.newTrustedTransport();</span><br><span class="line">        sheets = <span class="keyword">new</span> Sheets.Builder(transport, JacksonFactory.getDefaultInstance(), credential).setApplicationName(appName).build();</span><br><span class="line">        youTube = <span class="keyword">new</span> YouTube.Builder(transport, JacksonFactory.getDefaultInstance(), credential).setApplicationName(appName).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사실, 이게 다 입니다. 저 @Value 부분만 잘 설정해주세요.<br>저의경우 application.yml에 저런 형태로 넣었기때문에 저렇게 했지만 하드코딩을 하셔도 되고, 다르게 하셔도 됩니다.</p><p>위처럼 GoogleAPIClient 라는 bean 의 생성자에서 필요한 객체들을 생성해주고요.<br>그 다음부턴 아래를 참고하여 api를 사용하시면 되겠습니다.<br><a href="https://developers.google.com/youtube/v3/docs/" rel="external nofollow noopener noreferrer" target="_blank">https://developers.google.com/youtube/v3/docs/</a><br><a href="https://developers.google.com/sheets/api/?hl=ko" rel="external nofollow noopener noreferrer" target="_blank">https://developers.google.com/sheets/api/?hl=ko</a></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>구글 api 로그인하는건 저 코드가 다인데 저렇게 정리된 사이트가 없더군요.<br>(물론 구글 공식 레퍼런스도 있는데 뭔가 막 이것저것 써있어서 알아보기가 어렵네요.)<br>수동으로 인증 태워서 restful api를 사용하고 싶은 분도 계시겠지만 그걸 자동으로 해주는게 위 과정이라서<br>java에서 사용하실거라면 맘편히 위 방법을 추천드립니다.<br>저렇게 인증로직한 한번 잘 만들면 google api 여러개를 사용할 수 있으니까요.</p>]]></content:encoded>
      
      <comments>https://mingpd.github.io/2019/03/12/java-google-api/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
